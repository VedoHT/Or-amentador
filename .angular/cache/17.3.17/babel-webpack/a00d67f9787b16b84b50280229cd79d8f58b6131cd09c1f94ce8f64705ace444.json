{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n    this.base = environment.apiUrl;\n  }\n  get(url, params) {\n    let hp = new HttpParams();\n    if (params) Object.keys(params).forEach(k => {\n      if (params[k] != null) hp = hp.set(k, params[k]);\n    });\n    return this.http.get(this.base + url, {\n      params: hp,\n      withCredentials: true\n    });\n  }\n  post(url, body) {\n    return this.http.post(this.base + url, body, {\n      withCredentials: true\n    });\n  }\n  put(url, body) {\n    return this.http.put(this.base + url, body, {\n      withCredentials: true\n    });\n  }\n  delete(url) {\n    return this.http.delete(this.base + url, {\n      withCredentials: true\n    });\n  }\n  static {\n    this.ɵfac = function ApiService_Factory(t) {\n      return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ApiService,\n      factory: ApiService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpParams","environment","ApiService","constructor","http","base","apiUrl","get","url","params","hp","Object","keys","forEach","k","set","withCredentials","post","body","put","delete","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["G:\\Estudos\\Angular\\Orcamentador\\src\\app\\services\\api.service.ts"],"sourcesContent":["import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from '../../environments/environment';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ApiService {\r\n    protected base = environment.apiUrl;\r\n\r\n    constructor(protected http: HttpClient) {}\r\n\r\n    get<T>(url: string, params?: Record<string, any>) {\r\n        let hp = new HttpParams();\r\n        if (params) Object.keys(params).forEach(k => { if (params[k] != null) hp = hp.set(k, params[k]); });\r\n        return this.http.get<T>(this.base + url, { params: hp, withCredentials: true });\r\n    }\r\n\r\n    post<T>(url: string, body?: any) {\r\n        return this.http.post<T>(this.base + url, body, { withCredentials: true });\r\n    }\r\n\r\n    put<T>(url: string, body?: any) {\r\n        return this.http.put<T>(this.base + url, body, { withCredentials: true });\r\n    }\r\n\r\n    delete<T>(url: string) {\r\n        return this.http.delete<T>(this.base + url, { withCredentials: true });\r\n    }\r\n}\r\n"],"mappings":"AAAA,SAAqBA,UAAU,QAAQ,sBAAsB;AAE7D,SAASC,WAAW,QAAQ,gCAAgC;;;AAG5D,OAAM,MAAOC,UAAU;EAGnBC,YAAsBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,IAAI,GAAGJ,WAAW,CAACK,MAAM;EAEM;EAEzCC,GAAGA,CAAIC,GAAW,EAAEC,MAA4B;IAC5C,IAAIC,EAAE,GAAG,IAAIV,UAAU,EAAE;IACzB,IAAIS,MAAM,EAAEE,MAAM,CAACC,IAAI,CAACH,MAAM,CAAC,CAACI,OAAO,CAACC,CAAC,IAAG;MAAG,IAAIL,MAAM,CAACK,CAAC,CAAC,IAAI,IAAI,EAAEJ,EAAE,GAAGA,EAAE,CAACK,GAAG,CAACD,CAAC,EAAEL,MAAM,CAACK,CAAC,CAAC,CAAC;IAAE,CAAC,CAAC;IACnG,OAAO,IAAI,CAACV,IAAI,CAACG,GAAG,CAAI,IAAI,CAACF,IAAI,GAAGG,GAAG,EAAE;MAAEC,MAAM,EAAEC,EAAE;MAAEM,eAAe,EAAE;IAAI,CAAE,CAAC;EACnF;EAEAC,IAAIA,CAAIT,GAAW,EAAEU,IAAU;IAC3B,OAAO,IAAI,CAACd,IAAI,CAACa,IAAI,CAAI,IAAI,CAACZ,IAAI,GAAGG,GAAG,EAAEU,IAAI,EAAE;MAAEF,eAAe,EAAE;IAAI,CAAE,CAAC;EAC9E;EAEAG,GAAGA,CAAIX,GAAW,EAAEU,IAAU;IAC1B,OAAO,IAAI,CAACd,IAAI,CAACe,GAAG,CAAI,IAAI,CAACd,IAAI,GAAGG,GAAG,EAAEU,IAAI,EAAE;MAAEF,eAAe,EAAE;IAAI,CAAE,CAAC;EAC7E;EAEAI,MAAMA,CAAIZ,GAAW;IACjB,OAAO,IAAI,CAACJ,IAAI,CAACgB,MAAM,CAAI,IAAI,CAACf,IAAI,GAAGG,GAAG,EAAE;MAAEQ,eAAe,EAAE;IAAI,CAAE,CAAC;EAC1E;;;uBArBSd,UAAU,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAVtB,UAAU;MAAAuB,OAAA,EAAVvB,UAAU,CAAAwB,IAAA;MAAAC,UAAA,EADG;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}