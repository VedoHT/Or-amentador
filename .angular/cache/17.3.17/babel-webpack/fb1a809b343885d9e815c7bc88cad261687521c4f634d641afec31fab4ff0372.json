{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./api.service\";\nimport * as i2 from \"./auth.service\";\nexport class QuoteService {\n  constructor(api, auth) {\n    this.api = api;\n    this.auth = auth;\n    this.base = 'Quotes'; // ajuste para o seu prefixo real\n  }\n  /** Cria orçamento. Se logado, manda userId opcionalmente. */\n  create(payload) {\n    const userId = this.auth.getUserId();\n    const body = {\n      ...payload,\n      userId: userId || null\n    };\n    return this.api.post(`${this.base}/Create`, body);\n  }\n  /** Pega orçamento público pelo slug (não precisa estar logado). */\n  getBySlug(slug) {\n    return this.api.get(`${this.base}/Public/${slug}`);\n  }\n  /** Lista “meus orçamentos” (precisa estar logado / cookie JWT). */\n  listMine() {\n    return this.api.get(`${this.base}/Mine`);\n  }\n  static {\n    this.ɵfac = function QuoteService_Factory(t) {\n      return new (t || QuoteService)(i0.ɵɵinject(i1.ApiService), i0.ɵɵinject(i2.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: QuoteService,\n      factory: QuoteService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["QuoteService","constructor","api","auth","base","create","payload","userId","getUserId","body","post","getBySlug","slug","get","listMine","i0","ɵɵinject","i1","ApiService","i2","AuthService","factory","ɵfac","providedIn"],"sources":["G:\\Estudos\\Angular\\Orcamentador\\src\\app\\services\\quote.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ApiService } from './api.service';\r\nimport { QuotePayload, QuoteCreateResponse, QuoteView, QuoteListItem } from '../models/orcamento.model';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class QuoteService {\r\n    private base = 'Quotes'; // ajuste para o seu prefixo real\r\n\r\n    constructor(private api: ApiService, private auth: AuthService) {}\r\n\r\n    /** Cria orçamento. Se logado, manda userId opcionalmente. */\r\n    create(payload: QuotePayload): Observable<QuoteCreateResponse> {\r\n        const userId = this.auth.getUserId();\r\n        const body = { ...payload, userId: userId || null };\r\n        return this.api.post<QuoteCreateResponse>(`${this.base}/Create`, body);\r\n    }\r\n\r\n    /** Pega orçamento público pelo slug (não precisa estar logado). */\r\n    getBySlug(slug: string): Observable<QuoteView> {\r\n        return this.api.get<QuoteView>(`${this.base}/Public/${slug}`);\r\n    }\r\n\r\n    /** Lista “meus orçamentos” (precisa estar logado / cookie JWT). */\r\n    listMine(): Observable<QuoteListItem[]> {\r\n        return this.api.get<QuoteListItem[]>(`${this.base}/Mine`);\r\n    }\r\n}\r\n"],"mappings":";;;AAOA,OAAM,MAAOA,YAAY;EAGrBC,YAAoBC,GAAe,EAAUC,IAAiB;IAA1C,KAAAD,GAAG,GAAHA,GAAG;IAAsB,KAAAC,IAAI,GAAJA,IAAI;IAFzC,KAAAC,IAAI,GAAG,QAAQ,CAAC,CAAC;EAEwC;EAEjE;EACAC,MAAMA,CAACC,OAAqB;IACxB,MAAMC,MAAM,GAAG,IAAI,CAACJ,IAAI,CAACK,SAAS,EAAE;IACpC,MAAMC,IAAI,GAAG;MAAE,GAAGH,OAAO;MAAEC,MAAM,EAAEA,MAAM,IAAI;IAAI,CAAE;IACnD,OAAO,IAAI,CAACL,GAAG,CAACQ,IAAI,CAAsB,GAAG,IAAI,CAACN,IAAI,SAAS,EAAEK,IAAI,CAAC;EAC1E;EAEA;EACAE,SAASA,CAACC,IAAY;IAClB,OAAO,IAAI,CAACV,GAAG,CAACW,GAAG,CAAY,GAAG,IAAI,CAACT,IAAI,WAAWQ,IAAI,EAAE,CAAC;EACjE;EAEA;EACAE,QAAQA,CAAA;IACJ,OAAO,IAAI,CAACZ,GAAG,CAACW,GAAG,CAAkB,GAAG,IAAI,CAACT,IAAI,OAAO,CAAC;EAC7D;;;uBApBSJ,YAAY,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,WAAA;IAAA;EAAA;;;aAAZpB,YAAY;MAAAqB,OAAA,EAAZrB,YAAY,CAAAsB,IAAA;MAAAC,UAAA,EADC;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}