{"ast":null,"code":"import { HttpResponse } from '@angular/common/http';\nimport { catchError, finalize, map, switchMap, throwError } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/toast.service\";\nimport * as i2 from \"../services/auth.service\";\nimport * as i3 from \"../services/login.service\";\nimport * as i4 from \"@angular/router\";\nexport class StatusInterceptor {\n  constructor(toast, auth, login, router) {\n    this.toast = toast;\n    this.auth = auth;\n    this.login = login;\n    this.router = router;\n    this.isRefreshing = false;\n  }\n  intercept(req, next) {\n    const cloned = req.clone({\n      withCredentials: true\n    });\n    return next.handle(cloned).pipe(map(evt => {\n      if (evt instanceof HttpResponse) {\n        const status = evt.status;\n        const body = evt.body;\n        const msg = body?.mensagem || body?.message || (status >= 200 && status < 300 ? 'Operação realizada com sucesso.' : '');\n        // Sucesso explícito\n        if (status >= 200 && status < 300 && msg) this.toast.success(msg);\n      }\n      return evt;\n    }), catchError(err => {\n      const status = err.status;\n      const body = err.error;\n      const msg = body?.mensagem || body?.message || `Erro ${status}`;\n      if (status === 401) {\n        // tenta refresh se configurado\n        if (!this.isRefreshing && environment.refreshPath) {\n          this.isRefreshing = true;\n          return this.login.Refresh().pipe(switchMap(() => {\n            this.isRefreshing = false;\n            // repetir a requisição original com credenciais\n            return next.handle(cloned);\n          }), catchError(inner => {\n            this.isRefreshing = false;\n            this.toast.info('Sessão expirada. Faça login novamente.');\n            this.auth.logoutLocal();\n            this.router.navigate(['/login']);\n            return throwError(() => inner);\n          }));\n        } else {\n          this.toast.info('Não autorizado. Faça login.');\n          this.auth.logoutLocal();\n          this.router.navigate(['/login']);\n        }\n      } else if (status === 412) {\n        this.toast.warn(msg);\n      } else if (status >= 400) {\n        this.toast.error(msg);\n      }\n      return throwError(() => err);\n    }), finalize(() => {}));\n  }\n  static {\n    this.ɵfac = function StatusInterceptor_Factory(t) {\n      return new (t || StatusInterceptor)(i0.ɵɵinject(i1.ToastService), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i3.LoginService), i0.ɵɵinject(i4.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: StatusInterceptor,\n      factory: StatusInterceptor.ɵfac\n    });\n  }\n}","map":{"version":3,"names":["HttpResponse","catchError","finalize","map","switchMap","throwError","environment","StatusInterceptor","constructor","toast","auth","login","router","isRefreshing","intercept","req","next","cloned","clone","withCredentials","handle","pipe","evt","status","body","msg","mensagem","message","success","err","error","refreshPath","Refresh","inner","info","logoutLocal","navigate","warn","i0","ɵɵinject","i1","ToastService","i2","AuthService","i3","LoginService","i4","Router","factory","ɵfac"],"sources":["G:\\Estudos\\Angular\\Orcamentador\\src\\app\\interceptors\\status.interceptor.ts"],"sourcesContent":["import { HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest, HttpResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, catchError, finalize, map, switchMap, throwError } from 'rxjs';\r\nimport { ToastService } from '../services/toast.service';\r\nimport { LoginService } from '../services/login.service';\r\nimport { Router } from '@angular/router';\r\nimport { environment } from '../../environments/environment';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n@Injectable()\r\nexport class StatusInterceptor implements HttpInterceptor {\r\n  private isRefreshing = false;\r\n\r\n  constructor(\r\n    private toast: ToastService,\r\n    private auth: AuthService,\r\n    private login: LoginService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    const cloned = req.clone({ withCredentials: true });\r\n\r\n    return next.handle(cloned).pipe(\r\n      map(evt => {\r\n        if (evt instanceof HttpResponse) {\r\n          const status = evt.status;\r\n          const body: any = evt.body;\r\n          const msg = body?.mensagem || body?.message || (status >= 200 && status < 300 ? 'Operação realizada com sucesso.' : '');\r\n          // Sucesso explícito\r\n          if (status >= 200 && status < 300 && msg) this.toast.success(msg);\r\n        }\r\n        return evt;\r\n      }),\r\n      catchError((err: HttpErrorResponse) => {\r\n        const status = err.status;\r\n        const body: any = err.error;\r\n        const msg = body?.mensagem || body?.message || `Erro ${status}`;\r\n\r\n        if (status === 401) {\r\n          // tenta refresh se configurado\r\n          if (!this.isRefreshing && environment.refreshPath) {\r\n            this.isRefreshing = true;\r\n            return this.login.Refresh().pipe(\r\n              switchMap(() => {\r\n                this.isRefreshing = false;\r\n                // repetir a requisição original com credenciais\r\n                return next.handle(cloned);\r\n              }),\r\n              catchError(inner => {\r\n                this.isRefreshing = false;\r\n                this.toast.info('Sessão expirada. Faça login novamente.');\r\n                this.auth.logoutLocal();\r\n                this.router.navigate(['/login']);\r\n                return throwError(() => inner);\r\n              })\r\n            );\r\n          } else {\r\n            this.toast.info('Não autorizado. Faça login.');\r\n            this.auth.logoutLocal();\r\n            this.router.navigate(['/login']);\r\n          }\r\n        } else if (status === 412) {\r\n          this.toast.warn(msg);\r\n        } else if (status >= 400) {\r\n          this.toast.error(msg);\r\n        }\r\n        return throwError(() => err);\r\n      }),\r\n      finalize(() => {})\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}