{"ast":null,"code":"import { of } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class LoginService {\n  constructor(http) {\n    this.http = http;\n    this.api = environment.apiUrl + 'Login';\n  }\n  PreLogin(dados) {\n    return this.http.post(`${this.api}/PreLogin`, dados, {\n      withCredentials: true\n    });\n  }\n  RegistrarUsuario(RegistrarUsuarioRequest) {\n    return this.http.post(`${this.api}/RegistrarUsuario`, RegistrarUsuarioRequest, {\n      withCredentials: true\n    });\n  }\n  Login(dados, codigo, keepMeConnected) {\n    return this.http.post(`${this.api}/Login/${codigo}`, {\n      ...dados,\n      keepMeConnected\n    }, {\n      withCredentials: true\n    });\n  }\n  Logout() {\n    return this.http.post(`${this.api}/Logout`, {}, {\n      withCredentials: true\n    });\n  }\n  /** Opcional: renova JWT silenciosamente usando refreshToken cookie.\n   *  Ajuste environment.refreshPath se seu backend já possuir esse endpoint.\n   */\n  Refresh() {\n    if (!environment.refreshPath) return of(null);\n    return this.http.post(`${environment.apiUrl}${environment.refreshPath}`, {}, {\n      withCredentials: true\n    });\n  }\n  static {\n    this.ɵfac = function LoginService_Factory(t) {\n      return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: LoginService,\n      factory: LoginService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["of","environment","LoginService","constructor","http","api","apiUrl","PreLogin","dados","post","withCredentials","RegistrarUsuario","RegistrarUsuarioRequest","Login","codigo","keepMeConnected","Logout","Refresh","refreshPath","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["G:\\Estudos\\Angular\\Orcamentador\\src\\app\\services\\login.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { environment } from '../../environments/environment';\r\nimport {\r\n    PreLoginRequest,\r\n    RetornoDadoGeradoUsuarioResponse,\r\n    RetornoUsuariosGeral\r\n} from '../models/usuarios.model';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class LoginService {\r\n    private api = environment.apiUrl + 'Login';\r\n\r\n    constructor(private http: HttpClient) {}\r\n\r\n    PreLogin(dados: PreLoginRequest): Observable<RetornoDadoGeradoUsuarioResponse> {\r\n        return this.http.post<RetornoDadoGeradoUsuarioResponse>(`${this.api}/PreLogin`, dados, { withCredentials: true });\r\n    }\r\n\r\n    RegistrarUsuario(RegistrarUsuarioRequest: any): Observable<boolean> {\r\n        return this.http.post<boolean>(`${this.api}/RegistrarUsuario`, RegistrarUsuarioRequest, { withCredentials: true });\r\n    }\r\n\r\n    Login(dados: RetornoUsuariosGeral, codigo: string, keepMeConnected: boolean): Observable<boolean> {\r\n        return this.http.post<boolean>(`${this.api}/Login/${codigo}`, { ...dados, keepMeConnected }, { withCredentials: true });\r\n    }\r\n\r\n    Logout(): Observable<{ status: boolean; mensagem: string }> {\r\n        return this.http.post<{ status: boolean; mensagem: string }>(`${this.api}/Logout`, {}, { withCredentials: true });\r\n    }\r\n\r\n    /** Opcional: renova JWT silenciosamente usando refreshToken cookie.\r\n     *  Ajuste environment.refreshPath se seu backend já possuir esse endpoint.\r\n     */\r\n    Refresh(): Observable<any> {\r\n        if (!environment.refreshPath) return of(null);\r\n        return this.http.post<any>(`${environment.apiUrl}${environment.refreshPath}`, {}, { withCredentials: true });\r\n    }\r\n}\r\n"],"mappings":"AAEA,SAAqBA,EAAE,QAAQ,MAAM;AACrC,SAASC,WAAW,QAAQ,gCAAgC;;;AAQ5D,OAAM,MAAOC,YAAY;EAGrBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,GAAG,GAAGJ,WAAW,CAACK,MAAM,GAAG,OAAO;EAEH;EAEvCC,QAAQA,CAACC,KAAsB;IAC3B,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAmC,GAAG,IAAI,CAACJ,GAAG,WAAW,EAAEG,KAAK,EAAE;MAAEE,eAAe,EAAE;IAAI,CAAE,CAAC;EACrH;EAEAC,gBAAgBA,CAACC,uBAA4B;IACzC,OAAO,IAAI,CAACR,IAAI,CAACK,IAAI,CAAU,GAAG,IAAI,CAACJ,GAAG,mBAAmB,EAAEO,uBAAuB,EAAE;MAAEF,eAAe,EAAE;IAAI,CAAE,CAAC;EACtH;EAEAG,KAAKA,CAACL,KAA2B,EAAEM,MAAc,EAAEC,eAAwB;IACvE,OAAO,IAAI,CAACX,IAAI,CAACK,IAAI,CAAU,GAAG,IAAI,CAACJ,GAAG,UAAUS,MAAM,EAAE,EAAE;MAAE,GAAGN,KAAK;MAAEO;IAAe,CAAE,EAAE;MAAEL,eAAe,EAAE;IAAI,CAAE,CAAC;EAC3H;EAEAM,MAAMA,CAAA;IACF,OAAO,IAAI,CAACZ,IAAI,CAACK,IAAI,CAAwC,GAAG,IAAI,CAACJ,GAAG,SAAS,EAAE,EAAE,EAAE;MAAEK,eAAe,EAAE;IAAI,CAAE,CAAC;EACrH;EAEA;;;EAGAO,OAAOA,CAAA;IACH,IAAI,CAAChB,WAAW,CAACiB,WAAW,EAAE,OAAOlB,EAAE,CAAC,IAAI,CAAC;IAC7C,OAAO,IAAI,CAACI,IAAI,CAACK,IAAI,CAAM,GAAGR,WAAW,CAACK,MAAM,GAAGL,WAAW,CAACiB,WAAW,EAAE,EAAE,EAAE,EAAE;MAAER,eAAe,EAAE;IAAI,CAAE,CAAC;EAChH;;;uBA3BSR,YAAY,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAZpB,YAAY;MAAAqB,OAAA,EAAZrB,YAAY,CAAAsB,IAAA;MAAAC,UAAA,EADC;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}