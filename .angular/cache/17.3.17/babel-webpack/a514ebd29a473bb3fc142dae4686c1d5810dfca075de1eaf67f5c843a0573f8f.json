{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    this.KEY = 'wizard_auth_user';\n  }\n  get currentUser() {\n    const raw = localStorage.getItem(this.KEY);\n    return raw ? JSON.parse(raw) : null;\n  }\n  isLoggedIn() {\n    return !!this.currentUser;\n  }\n  login(identifier, _kind = 'otp') {\n    // Você pode setar mais metadados aqui. O JWT real está no cookie HttpOnly.\n    const id = 'u_' + btoa(identifier).replace(/=+$/, '');\n    localStorage.setItem(this.KEY, JSON.stringify({\n      id,\n      email: identifier\n    }));\n  }\n  logoutLocal() {\n    localStorage.removeItem(this.KEY);\n  }\n  getUserId() {\n    return this.currentUser?.id ?? null;\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["AuthService","constructor","KEY","currentUser","raw","localStorage","getItem","JSON","parse","isLoggedIn","login","identifier","_kind","id","btoa","replace","setItem","stringify","email","logoutLocal","removeItem","getUserId","factory","ɵfac","providedIn"],"sources":["G:\\Estudos\\Angular\\Orcamentador\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nexport interface User {\r\n    id: string;\r\n    email: string;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthService {\r\n    private KEY = 'wizard_auth_user';\r\n\r\n    get currentUser(): User | null {\r\n        const raw = localStorage.getItem(this.KEY);\r\n        return raw ? JSON.parse(raw) as User : null;\r\n    }\r\n\r\n    isLoggedIn(): boolean {\r\n        return !!this.currentUser;\r\n    }\r\n\r\n    login(identifier: string, _kind: 'otp' | 'password' = 'otp') {\r\n        // Você pode setar mais metadados aqui. O JWT real está no cookie HttpOnly.\r\n        const id = 'u_' + btoa(identifier).replace(/=+$/,'');\r\n        localStorage.setItem(this.KEY, JSON.stringify({ id, email: identifier }));\r\n    }\r\n\r\n    logoutLocal() {\r\n        localStorage.removeItem(this.KEY);\r\n    }\r\n\r\n    getUserId(): string | null {\r\n        return this.currentUser?.id ?? null;\r\n    }\r\n}\r\n"],"mappings":";AAQA,OAAM,MAAOA,WAAW;EADxBC,YAAA;IAEY,KAAAC,GAAG,GAAG,kBAAkB;;EAEhC,IAAIC,WAAWA,CAAA;IACX,MAAMC,GAAG,GAAGC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACJ,GAAG,CAAC;IAC1C,OAAOE,GAAG,GAAGG,IAAI,CAACC,KAAK,CAACJ,GAAG,CAAS,GAAG,IAAI;EAC/C;EAEAK,UAAUA,CAAA;IACN,OAAO,CAAC,CAAC,IAAI,CAACN,WAAW;EAC7B;EAEAO,KAAKA,CAACC,UAAkB,EAAEC,KAAA,GAA4B,KAAK;IACvD;IACA,MAAMC,EAAE,GAAG,IAAI,GAAGC,IAAI,CAACH,UAAU,CAAC,CAACI,OAAO,CAAC,KAAK,EAAC,EAAE,CAAC;IACpDV,YAAY,CAACW,OAAO,CAAC,IAAI,CAACd,GAAG,EAAEK,IAAI,CAACU,SAAS,CAAC;MAAEJ,EAAE;MAAEK,KAAK,EAAEP;IAAU,CAAE,CAAC,CAAC;EAC7E;EAEAQ,WAAWA,CAAA;IACPd,YAAY,CAACe,UAAU,CAAC,IAAI,CAAClB,GAAG,CAAC;EACrC;EAEAmB,SAASA,CAAA;IACL,OAAO,IAAI,CAAClB,WAAW,EAAEU,EAAE,IAAI,IAAI;EACvC;;;uBAxBSb,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAAsB,OAAA,EAAXtB,WAAW,CAAAuB,IAAA;MAAAC,UAAA,EADE;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}