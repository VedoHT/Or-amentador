{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class QuoteService {\n  constructor() {\n    this.PUBLIC_KEY = 'quotes_public';\n    this.USER_PREFIX = 'quotes_user_'; // quotes_user_<userId>\n  }\n  listPublic() {\n    const raw = localStorage.getItem(this.PUBLIC_KEY);\n    return raw ? JSON.parse(raw) : [];\n  }\n  savePublic(arr) {\n    localStorage.setItem(this.PUBLIC_KEY, JSON.stringify(arr));\n  }\n  listUser(userId) {\n    const raw = localStorage.getItem(this.USER_PREFIX + userId);\n    return raw ? JSON.parse(raw) : [];\n  }\n  saveUser(userId, arr) {\n    localStorage.setItem(this.USER_PREFIX + userId, JSON.stringify(arr));\n  }\n  makeSlug(len = 6) {\n    const chars = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789';\n    let s = '';\n    for (let i = 0; i < len; i++) s += chars[Math.floor(Math.random() * chars.length)];\n    return s;\n  }\n  /** Cria e salva publicamente; se userId existir, salva também no espaço do usuário */\n  create(input, userId) {\n    let slug = this.makeSlug();\n    const pub = this.listPublic();\n    while (pub.some(q => q.slug === slug)) slug = this.makeSlug();\n    const q = {\n      ...input,\n      slug,\n      createdAt: new Date().toISOString()\n    };\n    // sempre salva no público (para link funcionar)\n    pub.push(q);\n    this.savePublic(pub);\n    // salva também no usuário (se logado)\n    if (userId) {\n      const u = this.listUser(userId);\n      u.push(q);\n      this.saveUser(userId, u);\n    }\n    return q;\n  }\n  /** Busca pelo link público */\n  getBySlug(slug) {\n    return this.listPublic().find(q => q.slug === slug) ?? null;\n  }\n  /** Lista apenas do usuário logado */\n  allForUser(userId) {\n    return this.listUser(userId).sort((a, b) => a.createdAt < b.createdAt ? 1 : -1);\n  }\n  static {\n    this.ɵfac = function QuoteService_Factory(t) {\n      return new (t || QuoteService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: QuoteService,\n      factory: QuoteService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["QuoteService","constructor","PUBLIC_KEY","USER_PREFIX","listPublic","raw","localStorage","getItem","JSON","parse","savePublic","arr","setItem","stringify","listUser","userId","saveUser","makeSlug","len","chars","s","i","Math","floor","random","length","create","input","slug","pub","some","q","createdAt","Date","toISOString","push","u","getBySlug","find","allForUser","sort","a","b","factory","ɵfac","providedIn"],"sources":["G:\\Estudos\\Angular\\Orcamentador\\src\\app\\services\\quote.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Quote, QuoteInput } from '../models';\n\n@Injectable({ providedIn: 'root' })\nexport class QuoteService {\n  private PUBLIC_KEY = 'quotes_public';\n  private USER_PREFIX = 'quotes_user_'; // quotes_user_<userId>\n\n  private listPublic(): Quote[] {\n    const raw = localStorage.getItem(this.PUBLIC_KEY);\n    return raw ? JSON.parse(raw) : [];\n  }\n  private savePublic(arr: Quote[]) {\n    localStorage.setItem(this.PUBLIC_KEY, JSON.stringify(arr));\n  }\n\n  private listUser(userId: string): Quote[] {\n    const raw = localStorage.getItem(this.USER_PREFIX + userId);\n    return raw ? JSON.parse(raw) : [];\n  }\n  private saveUser(userId: string, arr: Quote[]) {\n    localStorage.setItem(this.USER_PREFIX + userId, JSON.stringify(arr));\n  }\n\n  private makeSlug(len = 6): string {\n    const chars = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789';\n    let s = '';\n    for (let i=0;i<len;i++) s += chars[Math.floor(Math.random()*chars.length)];\n    return s;\n  }\n\n  /** Cria e salva publicamente; se userId existir, salva também no espaço do usuário */\n  create(input: QuoteInput, userId?: string | null): Quote {\n    let slug = this.makeSlug();\n    const pub = this.listPublic();\n    while (pub.some(q => q.slug === slug)) slug = this.makeSlug();\n\n    const q: Quote = { ...input, slug, createdAt: new Date().toISOString() };\n\n    // sempre salva no público (para link funcionar)\n    pub.push(q);\n    this.savePublic(pub);\n\n    // salva também no usuário (se logado)\n    if (userId) {\n      const u = this.listUser(userId);\n      u.push(q);\n      this.saveUser(userId, u);\n    }\n\n    return q;\n  }\n\n  /** Busca pelo link público */\n  getBySlug(slug: string): Quote | null {\n    return this.listPublic().find(q => q.slug === slug) ?? null;\n  }\n\n  /** Lista apenas do usuário logado */\n  allForUser(userId: string): Quote[] {\n    return this.listUser(userId).sort((a,b)=> (a.createdAt < b.createdAt ? 1 : -1));\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}